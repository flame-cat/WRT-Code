// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    private final Shooter m_shooter = new Shooter();
    private final Gate m_gate = new Gate();
    private final Feeder m_feeder = new Feeder();
    private final Intake m_intake = new Intake();
    private final Drivetrain m_drivetrain = new Drivetrain();

// Joysticks
private final XboxController xboxController = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_drivetrain);


    // SmartDashboard Buttons
    SmartDashboard.putData("Drive", new Drive( m_drivetrain ));
    SmartDashboard.putData("IntakeOn", new IntakeOn( m_intake ));
    SmartDashboard.putData("FeederOn", new FeederOn( m_feeder ));
    SmartDashboard.putData("OpenGate", new OpenGate( m_gate ));
    SmartDashboard.putData("ShooterOnNear", new ShooterOnNear( m_shooter ));
    SmartDashboard.putData("ShooterOnFar", new ShooterOnFar( m_shooter ));
    SmartDashboard.putData("ShooterOff", new ShooterOff( m_shooter ));
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_drivetrain.setDefaultCommand(new Drive( m_drivetrain ) );


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton y_IntakeOn = new JoystickButton(xboxController, XboxController.Button.kY.value);        
y_IntakeOn.whileHeld(new IntakeOn( m_intake ) ,true);
    SmartDashboard.putData("Y_IntakeOn",new IntakeOn( m_intake ) );

final JoystickButton a_FeederOn = new JoystickButton(xboxController, XboxController.Button.kA.value);        
a_FeederOn.whileHeld(new FeederOn( m_feeder ) ,true);
    SmartDashboard.putData("A_FeederOn",new FeederOn( m_feeder ) );

final JoystickButton start_OpenGate = new JoystickButton(xboxController, XboxController.Button.kStart.value);        
start_OpenGate.whileHeld(new OpenGate( m_gate ) ,true);
    SmartDashboard.putData("Start_OpenGate",new OpenGate( m_gate ) );

final JoystickButton bumpLeft_ShooterOnNear = new JoystickButton(xboxController, XboxController.Button.kBumperLeft.value);        
bumpLeft_ShooterOnNear.whenPressed(new ShooterOnNear( m_shooter ) ,true);
    SmartDashboard.putData("BumpLeft_ShooterOnNear",new ShooterOnNear( m_shooter ) );

final JoystickButton bumpRight_ShooterOnFar = new JoystickButton(xboxController, XboxController.Button.kBumperRight.value);        
bumpRight_ShooterOnFar.whenPressed(new ShooterOnFar( m_shooter ) ,true);
    SmartDashboard.putData("BumpRight_ShooterOnFar",new ShooterOnFar( m_shooter ) );

final JoystickButton back_ShooterOff = new JoystickButton(xboxController, XboxController.Button.kBack.value);        
back_ShooterOff.whenPressed(new ShooterOff( m_shooter ) ,true);
    SmartDashboard.putData("Back_ShooterOff",new ShooterOff( m_shooter ) );



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getXboxController() {
      return xboxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}


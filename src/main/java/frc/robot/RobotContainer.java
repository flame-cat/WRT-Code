package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/*
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems
  private final Shooter m_shooter = new Shooter();
  private final Feeder m_feeder = new Feeder();
  private final Drivetrain m_drivetrain = new Drivetrain();

  // Joysticks
  private final XboxController xboxController = new XboxController(0);
  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  // The container for the robot.  Contains subsystems, OI devices, and commands.
  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_drivetrain);

    // SmartDashboard Buttons
    SmartDashboard.putData("Drive", new Drive( m_drivetrain ));
    SmartDashboard.putData("FeederOn", new FeederOn( m_feeder ));
    SmartDashboard.putData("ShooterOnGreen", new ShooterOnGreen( m_shooter ));
    SmartDashboard.putData("ShooterOnYellow", new ShooterOnYellow( m_shooter ));
    SmartDashboard.putData("ShooterOnBlue", new ShooterOnBlue( m_shooter ));
    SmartDashboard.putData("ShooterOnRed", new ShooterOnRed( m_shooter ));
    SmartDashboard.putData("ShooterOff", new ShooterOff( m_shooter ));
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("DriveToggle", new DriveToggle( m_drivetrain ));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD

    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_drivetrain.setDefaultCommand(new Drive( m_drivetrain ) );
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /*
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton back_DriveToggle = new JoystickButton(xboxController, XboxController.Button.kBack.value);        
back_DriveToggle.whenPressed(new DriveToggle( m_drivetrain ) ,true);
    SmartDashboard.putData("Back_DriveToggle",new DriveToggle( m_drivetrain ) );

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons
    final JoystickButton bumperRight_FeederOn = new JoystickButton(xboxController, XboxController.Button.kBumperRight.value);        
    bumperRight_FeederOn.whileHeld(new FeederOn( m_feeder ) ,true);
    SmartDashboard.putData("BumperRight_FeederOn",new FeederOn( m_feeder ) );

    final JoystickButton start_ShooterOff = new JoystickButton(xboxController, XboxController.Button.kStart.value);        
    start_ShooterOff.whenPressed(new ShooterOff( m_shooter ) ,true);
    SmartDashboard.putData("Start_ShooterOff",new ShooterOff( m_shooter ) );

    final JoystickButton b_ShooterOnRed = new JoystickButton(xboxController, XboxController.Button.kB.value);        
    b_ShooterOnRed.whenPressed(new ShooterOnRed( m_shooter ) ,true);
    SmartDashboard.putData("B_ShooterOnRed",new ShooterOnRed( m_shooter ) );

    final JoystickButton x_ShooterOnBlue = new JoystickButton(xboxController, XboxController.Button.kX.value);        
    x_ShooterOnBlue.whenPressed(new ShooterOnBlue( m_shooter ) ,true);
    SmartDashboard.putData("X_ShooterOnBlue",new ShooterOnBlue( m_shooter ) );

    final JoystickButton y_ShooterOnYellow = new JoystickButton(xboxController, XboxController.Button.kY.value);        
    y_ShooterOnYellow.whenPressed(new ShooterOnYellow( m_shooter ) ,true);
    SmartDashboard.putData("Y_ShooterOnYellow",new ShooterOnYellow( m_shooter ) );

    final JoystickButton a_ShooterOnGreen = new JoystickButton(xboxController, XboxController.Button.kA.value);        
    a_ShooterOnGreen.whenPressed(new ShooterOnGreen( m_shooter ) ,true);
    SmartDashboard.putData("A_ShooterOnGreen",new ShooterOnGreen( m_shooter ) );
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public XboxController getXboxController() {
    return xboxController;
  }
  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /*
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }  
}
